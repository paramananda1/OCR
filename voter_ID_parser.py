#########################################################	
#							#
#	   This is the parser file for Voter ID Card    #
#							#
#########################################################
import re
import difflib
import voter_id_ocr_module
import OCRUI
from collections import OrderedDict 

class ParsePAN:
	
	def __init__(self, **kwargs):
		self.inLineDelimiter = ";|:|-|\n"
		self.consumeLines = 0
		self.parsedTxt = {'Name': None, 'Fathers Name': None, 'Gender': None}

		self.final_dict={}
		self.noiseSensitivity = 0.3
		self.lineDelimiter = kwargs["lineDelimiter"]
		self.keywords = kwargs["keywords"]
		self.txt = kwargs["txt"]
		self.lineDelimiter = "\n"


		if self.lineDelimiter == "\n":
			if "consumeLines" in kwargs:
				self.consumeLines = kwargs["consumeLines"]
			else:
				self.consumeLines = 1					
		if "inLineDelimiter" in kwargs:
			self.inLineDelimiter = kwargs["inLineDelimiter"]
		if "noiseSensitivity" in kwargs:
			self.noiseSensitivity = kwargs["noiseSensitivity"]


################################################################
##Name: findKeyword
##parameter: (self: this is syntactic sugar as interpreter translates Class.abc("hi")  into Class.abc(obj,"hi"), line: a line passed by parse function)
##Return : returns an array containing a line with keyword

################################################################

	def findKeyword(self,line):
		line = line.lower()
		result = difflib.get_close_matches(line, self.keywords, cutoff=self.noiseSensitivity)
		if len(result) == 0:  
			return -1
		else:
			return result[0]


################################################################
##Name: parse
##parameter: (self: this is syntactic sugar as interpreter translates Class.abc()  into Class.abc(obj))
##Return : returns a python dictionary parsedTxt containing fields and values

################################################################

	def parse(self):
		lines = self.txt.split(self.lineDelimiter)
		parsed = {}
		keyword = None
		for index in range(0, len(lines)):
				line= re.split(self.inLineDelimiter,lines[index])
				keyword = self.findKeyword(line[0])
				if keyword == -1:
					continue
				if len(line) == 2:
					parsed[keyword] = line[1]
				else:
					parsed[keyword] = [line[i] for i in range(1, len(line))]
		self.parsedTxt = parsed
		return self.parsedTxt



################################################################
##Name: prettyPrint
##parameter: (self: this is syntactic sugar, separator value)
##prints : prints the corresponding key value pair

################################################################

	def parsed_dict(self):
		#for key in self.parsedTxt.items():
			#if key is not None

		if 'elector name' in self.parsedTxt:
			self.final_dict[' Name']=self.parsedTxt['elector name']
		elif 'Name' in self.parsedTxt:
			self.final_dict[' Name']=self.parsedTxt['Name']
		if 'father name' in self.parsedTxt:
			self.final_dict['Fathers Name']=self.parsedTxt['father name']
		
		if 'sex' in self.parsedTxt:
			if self.parsedTxt['sex'] is not None:
				self.final_dict['Gender']=self.parsedTxt['sex']
		#if 'date' or 'age' or 'date birth ' or'date of birth 'in self.parsedTxt:
			#self.final_dict['DOB']=self.parsedTxt['DOB']
		return self.final_dict
##################################################################################################
#												##
# Method: cleaning (Function to remove the non relevent characters from respective fields)	##
# Parameter: It takes Dictionary as a parameter.	     					##
# Return: It returns nothing.									##
#												##
#################################################################################################
	def cleaning(self):
	#	try:
		if 'sex' in self.parsedTxt:
			if(re.search("female",(self.parsedTxt['sex']).lower(),re.IGNORECASE) or re.search("F",(self.parsedTxt['sex']))):
				self.parsedTxt['sex']="Female"
			elif(re.search("male",(self.parsedTxt['sex']).lower(),re.IGNORECASE) or re.search("M",(self.parsedTxt['sex']))):
				self.parsedTxt['sex']="Male"
			else:
				self.parsedTxt['sex']="Other"
			#except GenderNotProvided: 
		else:
			print("No gender mentioned")
#################################################################################################
#												#
# Method: main_temp (Function to convert passed string into dictionary)	                        #
# Parameter: It takes data string as a parameter.	      					#
# Return: It returns a dictionary.								#
#												#
#################################################################################################

	def main_temp(string):
		toParse = string
		#print(toParse)
		print("\nGenerated By tesseract: "+toParse)
		if toParse is not None:
			abc = ParsePAN(lineDelimiter="\n", consumeLines=0, keywords=["Name","elector name","sex" ,"father name","date birth","DOB"], txt=toParse)
			abc.parse()
			abc.final_dict = OrderedDict()
			abc.cleaning() 
			abc.parsed_dict()

		else:
			print("\nQR was detected, so tesseract is skipped!!")
		#print("\nFinal dictionary: "+str(abc.parsedTxt)+"\n")
		#print("\nFinal dictionary: "+str(abc.final_dict)+"\n")
		return abc.final_dict


